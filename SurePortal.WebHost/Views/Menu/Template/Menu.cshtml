@using DaiPhatDat.WebHost.Common
@model DaiPhatDat.WebHost.Models.Navigation.MenuUpdateModel

<style>
    .symbol-valid, .errMsg {
        color: red;
    }

    .select2-container .select2-selection--single {
        height: 33px;
    }

    .cer-file {
        display: none;
        opacity: 0;
    }

        .cer-file.active {
            display: block;
            opacity: 1;
        }
</style>
<div class="row">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.NavNodeId)
</div>
<div class="row">
    <div class="col-md-6 col-xs-12">
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.ParentId)
            </label>
            @Html.DropDownListFor(x => x.ParentId, Model.LstMenu, "Chọn menu", new { @class = "form-control" })
        </div>
    </div>
    <div class="col-md-6 col-xs-12">
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.TypeModule)
            </label>
            @Html.EnumDropDownListFor(x => x.TypeModule, "Tất cả", new { @class = "form-control", onchange = "lacviet_addOrup.onChangeType(this)" })
            @Html.ValidationMessageFor(x => x.TypeModule, string.Empty, new { @style = "color: #e7505a" })

        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.Name)
                <span class="symbol-valid">*</span>
            </label>
            @Html.TextBoxFor(x => x.Name, new { @class = "form-control", placeholder = "Nhập tên menu", onchange = "lacviet_addOrup.onConvertURL(this)" })
            @Html.ValidationMessageFor(x => x.Name, string.Empty, new { @style = "color: #e7505a" })
        </div>

    </div>
    <div class="col-md-6 col-xs-12">
        <div class="form-group">
            <label>
                Chọn đường dẫn(nếu có):
            </label>
            <div class="input-search-single">
                <input id="navAutocomplete" class="form-control" placeholder="Tìm kiếm..." />
                <a onclick="lacviet_addOrup.onAddNavNode()"
                   data-toggle="modal"
                   data-target="#stackPopup"
                   class="btn green mr0 btn-search-text-single">
                    <i class="flaticon-plus"></i> Tạo mới
                </a>
            </div>
        </div>

    </div>
</div>
<div class="row">
    <div class="col-md-6">      
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.Code)
                <span class="symbol-valid">*</span>
            </label>
            @if (Model.Action == CommonValues.Action.Update)
            {
                @Html.TextBoxFor(x => x.Code, new { @class = "form-control", @readonly = "readonly" })
            }
            else
            {
                @Html.TextBoxFor(x => x.Code, new { @class = "form-control" })
            }

            @Html.ValidationMessageFor(x => x.Code, string.Empty, new { @style = "color: #e7505a" })
        </div>
    </div>
    <div class="col-md-6 col-xs-12">       
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.Link)
            </label>
            @Html.TextBoxFor(x => x.Link, new { @class = "form-control", @readonly = "readonly" })
        </div>

    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.Target)
            </label>
            @Html.DropDownListFor(m => m.Target, Model.LstTarget, "Không định nghĩa", new { @class = "form-control" })
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <div class="row">
                <div class="col-md-6">
                    <label>
                        @Html.DisplayNameFor(x => x.Icon)
                    </label>
                    @Html.TextBoxFor(x => x.Icon, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Icon, string.Empty, new { @style = "color: #e7505a" })
                </div>
                <div class="col-md-6">
                    <label>
                        @Html.DisplayNameFor(x => x.Order)
                        <span class="symbol-valid">*</span>
                    </label>
                    @Html.TextBoxFor(x => x.Order, new { @class = "form-control", placeholder = "Nhập số thứ tự", @type = "number" })
                </div>
            </div>

        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12 col-xs-12">
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.Status)
                <span class="symbol-valid">*</span>
            </label>
            @Html.EnumDropDownListFor(x => x.Status, new { @class = "form-control", @onchange = "lacviet_addOrup.onChangeStatus(this)" })
            @Html.ValidationMessageFor(x => x.Status, string.Empty, new { @style = "color: #e7505a" })
        </div>
    </div>
    <div class="col-md-12 col-xs-12" id="div-role">
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.Roles)
                <span class="symbol-valid"></span>
            </label>
            @Html.HiddenFor(x => x.Roles)
            @Html.DropDownList("Role", Model.ListRole, new { @class = "form-control", @id = "slectRole", @multiple = "multiple", @onchange = "lacviet_addOrup.onChangeRole(this)" })
        </div>
        <div class="form-group">
            <label>
                @Html.DisplayNameFor(x => x.GroupOrUsers)
                <span class="symbol-valid"></span>
            </label>
            @Html.HiddenFor(x => x.GroupOrUsers)
            <select id="slectUser" multiple class="form-control" onchange="lacviet_addOrup.onChangeGroupUsers(this)">
                @foreach (var item in Model.ListGroupOrUser)
                {
                    <option value="@item.Value" selected>@item.Text</option>
                }
            </select>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="form-group text-center">
            @Html.ValidationMessage("ErrSubmit", new { @class = "ErrSubmit errMsg" })
            <input style="display:none;opacity:0"
                   type="checkbox"
                   @(!ViewData.ModelState.IsValid ? "checked" : "")
                   onchange="HideLoading();" />
        </div>
    </div>
</div>
<div class="modal-footer">
    <button type="submit" class="btn btn-mini btn-info">
        <i class="glyphicon glyphicon-save mr5"></i>
        Lưu
    </button>
    <a class="btn default" href="@Url.Action(Constant.Action.Index, Constant.Controller.Menu,new { })">
        <i class="fa fa-close mr5"></i>
        Đóng
    </a>
</div>

<div class="modal fade" id="stackPopup" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="modal-dialog w1000">
        <div class="modal-content" id="popupPageDetail">
        </div>
    </div>
</div>

<script type="text/javascript">

    var lacviet_addOrup = {
        onConvertURL: function (elm) {
            var val = elm.value;
            var param = {
                name: val
            }
             // Send the data using post
            $.post('@Url.Action(Constant.Action.ConvertNameToURL, Constant.Controller.Menu)', param)
                .done(function (data) {
                    $("#Code").val(data);
                });
        },
        onChangeNavNode: function (id) {
                //ShowLoading();
                var param = {
                    navNodeId: id
                }
                if (id == '' || id == undefined || id=='@Guid.Empty') {
                    alertify.alert("Vui lòng chọn tài khoản").set({ title: "THÔNG BÁO" });
                    $("#NavNodeId").focus();
                    return;
                }
                // Send the data using post
                $.post('@Url.Action(Constant.Action.NavNodeInfo, Constant.Controller.Menu)', param)
                    .done(function (data) {
                        $("#infoNavNode").html(data);
                        //HideLoading();
                    }, 'html')
                    .fail(function () {
                        //HideLoading();
                    });
            },
        onAddNavNode: function () {
            //ShowLoading();
            $.get('@Url.Action(Constant.Action.Insert, Constant.Controller.NavNode)?isNav=false')
                .done(function (html) {
                    $("#popupPageDetail").html(html);
                    //HideLoading();
                }, 'html')
                .fail(function () {
                    //HideLoading();
                });
        },
        onChangeType: function (elm) {
            var val = elm.value;
            if (val == 0) {
               // $('#Title').prop('readonly', false);
               // $('#DepartmentId').prop('disabled', true);
                $('#Title').focus();
            } else {
                var txtTitle = $("#FullName").val();
                $('#Title').val(txtTitle);
               // $('#Title').prop('readonly', true);
                //$('#DepartmentId').prop('disabled', false);
            }
        },
        onChangeProvider: function (elm) {
            var type = $(elm).find(':selected').data('type');
           
        },
        onUpdateSuccess: function (result) {
            if (result.status) {
                lacviet_notification.updateSuccess();
                setTimeout(function () {
                    window.location.href = '@Url.Action(Constant.Action.Index, Constant.Controller.Menu)';
                }, 900);
            }
            else {
                lacviet_notification.deleteFail();
                $(".errMsg").html(result.msg);
                HideLoading();
            }
        },
        onReadURL:function(elm,type){
            var fsize = 1024 * 1024 * 2;
            if (elm.files[0].size < fsize) {
                if (elm.files && elm.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#imgURL' + type).attr('src', e.target.result);
                    }
                    reader.readAsDataURL(elm.files[0]);
                }
            }
            else {
                $(".errMsg").html("Allowed file size exceeded. (Max. 2 MB)");
            }
        },
        onChangeStatus: function (elem) {
            var value = $(elem).val();
            if (value != '2') {
                $("#div-role").css("display", "none");
            }
            else {
                $("#div-role").css("display", "block");
            }
        },

        onChangeRole: function (elem) {
            $("#Roles").val($(elem).val());
        },

        onChangeGroupUsers: function (elem) {
            $("#GroupOrUsers").val($(elem).val());
        }
    }



</script>
